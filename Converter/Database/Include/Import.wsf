<package>
<job id="VBImport">
<script language="VBScript" src="Common.vbs" />
<script language="VBScript">

Option Explicit

Const TemporaryFolder = 2

If (g_xmldoc Is Nothing) Then
	WScript.Echo "Warning: MSXML 3.0 is not present or properly installed. XML will not be validated before imports."
End If

'----------------------------------------------------------------------
' Generates a temporary file name that will be used
' to store an errors that we encounter during import.
'----------------------------------------------------------------------
Function GetErrorFileName()

	Dim fldTemp
	Dim strTempName

	Set fldTemp = g_fso.GetSpecialFolder(TemporaryFolder)
	strTempName = g_fso.GetTempName

	GetErrorFileName = fldTemp & "\" & strTempName

End Function

'----------------------------------------------------------------------
' Generates a temporary file name that will be used
' during the .XML concatenation process.
'----------------------------------------------------------------------
Function GetConcatFileName()

	Dim fldTemp
	Dim strTempName

	Set fldTemp = g_fso.GetSpecialFolder(TemporaryFolder)
	strTempName = g_fso.GetTempName

	GetConcatFileName = fldTemp & "\" & strTempName & ".XML"

End Function

'----------------------------------------------------------------------
' Retrieves the body of a log file given a 
' full path to the .XML file.
'----------------------------------------------------------------------
Function GetLogFileBody(strFileName)

	Dim tfh
	Dim strBody

    GetLogFileBody = ""

    If (Not( g_xmldoc Is Nothing) ) Then
        If (Not ValidateXML(strFileName)) Then
            WScript.Echo "Skipping file " & strFileName & " because the xml could not be validated." 
            Exit Function
        End If
    End If

	Set tfh = g_fso.OpenTextFile(strFileName, ForReading, False, FormatASCII)
	If (tfh.AtEndOfStream) Then
		GetLogFileBody = "ERROR: Unexpected end of file found."
		tfh.Close
		Exit Function
	End If

    If(args(4) = "-scans") Then
	    
	End If

	' Get rid of the static <dataroot></dataroot> element.
	If(args(4) = "-scans") Then
	    ' Discard the <?xml ... ?> line
	    tfh.ReadLine
	    
	    ' Read the rest of the file into a string buffer.
	    strBody = tfh.ReadAll
	    tfh.Close
	    Set tfh = Nothing
	    
	    If (Left(strBody, 10) = "<dataroot>") Then
		    strBody = Mid(strBody, 11)
	    End If
	    If (Right(strBody, 11) = "</dataroot>") Then
		    strBody = Left(strBody, Len(strBody) - 11)
	    End If
	End If
	
	If(args(4) = "-actions") Then
	
	    strBody = tfh.ReadLine
	    tfh.Close
	    Set tfh = Nothing 
	    
	    If (Left(strBody, 13) = "<OMPMActions>") Then
		    strBody = Mid(strBody, 14)
	    End If
	    If (Right(strBody, 14) = "</OMPMActions>") Then
		    strBody = Left(strBody, Len(strBody) - 14)
	    End If
	End If

	' Return the body of the XML file.
	GetLogFileBody = strBody

End Function

'----------------------------------------------------------------------
' Concatenates several small .XML files into one
' big .XML file that can be fed to the bulk loader.
'----------------------------------------------------------------------
Sub ConcatFiles(strLogDir, strOutputFile)

	Dim fld
	Dim file
	Dim tfhOutput

	Set fld = g_fso.GetFolder(strLogDir)

	Set tfhOutput = g_fso.OpenTextFile(strOutputFile, ForWriting, True, FormatASCII)
	tfhOutput.Write "<?xml version=""1.0"" encoding=""UTF-8"" ?>"
	If(args(4) = "-scans") Then
	    tfhOutput.Write "<dataroot>"
	End If
	If(args(4) = "-actions") Then
	    tfhOutput.Write "<OMPMActions>"
    End If

	For Each file In fld.Files
		tfhOutput.Write GetLogFileBody(strLogDir & "\" & file.Name)
	Next

    If(args(4) = "-scans") Then
	    tfhOutput.Write "</dataroot>"
	End If
	If(args(4) = "-actions") Then
	    tfhOutput.Write "</OMPMActions>"
	End If
	tfhOutput.Close

End Sub

'----------------------------------------------------------------------
' Dumps the contents of the error file to the console.
'----------------------------------------------------------------------
Sub ShowErrors(strFileName)

	Const ForReading = 1

	Dim tfh
	
	if (g_fso.FileExists(strFileName)) Then
	
		Set tfh = g_fso.OpenTextFile(strFileName, ForReading, False, -1)
		Do While tfh.AtEndOfStream <> True
			WScript.Echo tfh.ReadLine
		Loop
		tfh.Close

		' We're done with the error file at this point.
		g_fso.DeleteFile strFileName

	End If

End Sub

'----------------------------------------------------------------------
' Maps Scan data to Issues
'----------------------------------------------------------------------
Sub PostScans(objDatabase)
    Dim strSQL    

    On Error Resume Next
    strSQL = "EXEC [dbo].[Xp_PostScanFiles]"
    objDatabase.ExecuteImmediate strSQL
    If (Err.Number <> 0) Then
	WScript.Echo "CRITICAL ERROR: The mapping phase of import unexpectedly failed. Your database may be in an unstable or corrupt state."
	WScript.Echo Err.Description
	WScript.Echo ""
	WScript.Echo "Please See the OMPM documentation for more information:"
	WScript.Echo "http://technet2.microsoft.com/Office/f/?en-us/library/eabaaa29-afc9-4cb3-bdd0-2f09d3fae1831033.mspx"
    End If
    On Error Goto 0
End Sub

'----------------------------------------------------------------------
' Maps Scan data to Issues
'----------------------------------------------------------------------
Sub PostActions(objDatabase)
    Dim strSQL    
    
    On Error Resume Next
    strSQL = "EXEC [dbo].[Xp_PostToolActions]"
    objDatabase.ExecuteImmediate strSQL
    If (Err.Number <> 0) Then
	WScript.Echo "ERROR: The mapping phase of import unexpectedly failed."
	WScript.Echo Err.Description
	WScript.Echo ""
	WScript.Echo "Please See the OMPM documentation for more information:"
	WScript.Echo "http://technet2.microsoft.com/Office/f/?en-us/library/eabaaa29-afc9-4cb3-bdd0-2f09d3fae1831033.mspx"
	WScript.Quit ErrorSQLSprocFailed 
    End If
    On Error Goto 0
End Sub


'----------------------------------------------------------------------
' Updates the database with Companion Tool definition information
'----------------------------------------------------------------------
Sub UpdateToolDefinitionTables(objDatabase, strToolFolder)
    Dim objFolder    
    Dim file
    Set objFolder = g_fso.GetFolder(strToolFolder)
    For Each file In objFolder.Files 
        If (Left(file.Name, 5) = "Tool_") And (Right(file.Name, 4) = ".xml") Then
            WScript.Echo "Checking " + file.Name + " For Tool Definition"
		    UpdateToolHelper objDatabase, strToolFolder + "\" + file.Name
		    WScript.Echo
		End If
	Next
End Sub

'----------------------------------------------------------------------
' Helper Sub for updating Companion Tool definition information
'----------------------------------------------------------------------
Sub UpdateToolHelper(objDatabase, strToolDefinitionXML)

    Dim objTextStream
    Dim strToolDefinition
    Dim strSQL
    
    If g_fso.FileExists(strToolDefinitionXML) Then
        Set objTextStream = g_fso.OpenTextFile(strToolDefinitionXML, ForReading, False, FormatASCII)
        If (objTextStream.AtEndOfStream) Then
            WScript.Echo "Unexpected End of Tool Definition File"
            Exit Sub
        End If
        objTextStream.ReadLine 'discard line with <?xml ... ?>
        Do While Not objTextStream.AtEndOfStream
            strToolDefinition = strToolDefinition + objTextStream.ReadLine
        Loop
        objTextStream.Close
        Set objTextStream = nothing
       
        'Execute the import tool definition SQL stored procedure.
        strSQL = "EXECUTE [dbo].[Xp_ImportToolDef] N'" + strToolDefinition + "'"
        
        On Error Resume Next
        objDatabase.ExecuteImmediate strSQL
        If (Err.Number <> 0) Then
            WScript.Echo "ERROR: Failed to import tool definition."
            WScript.Echo Err.Description
        End If
        On Error Goto 0
        
    Else 
        WScript.Echo "The Tool Definition File: " + strToolDefinitionXML + " is Missing"
    End If
    
End Sub

'----------------------------------------------------------------------
' Main entry point.
'
' Arguments Expected (in order): 
'
'  1) To import a single XML file:
'
'		Server Name
'		Database Name
'		MapFile 
'		LogFile
'       "-scans" | "-actions"
'
'  2) To import an extracted CAB file.
'
'		Server Name
'		Database Name
'		MapFile 
'		LogDir
'       "-scans" | "-actions"
'		"-bulk"
'
'  3) To post scan data in the database.
'
'		Server Name
'		Database Name
'		"-postscans"
'
'  4) To post action data in the database.
'
'		Server Name
'		Database Name
'		"-postactions"
'
'  4) To import tool data.
'
'		Server Name
'		Database Name
'		MapFile
'       ToolDir
'       "-tools"
'----------------------------------------------------------------------

Dim args
Dim sqlbl
Dim strServer
Dim strDatabase
Dim strMapFile
Dim strLogFile
Dim strLogDir
Dim objSQLServer
Dim objDatabase
    
' Make sure we have the right number of arguments.
Set args = WScript.Arguments
If (args.Count < 3 or args.Count > 6) Then
	WScript.Echo "ERROR: Invalid argument."
	WScript.Quit ErrorInvalidArgs
End If

' Parse the arguments.	
strServer = args(0)
strDatabase = args(1)
strMapFile = args(2)

GetSQLServer objSQLServer 
Connect objSQLServer, strServer
GetDatabase objSQLServer, objDatabase, strDatabase

If (LCase(args(2)) = "-postscans") Then
    WScript.Echo "Mapping scan data for reports..."
    PostScans objDatabase
    WScript.Quit 0
ElseIf (LCase(args(2)) = "-postactions") Then
    WScript.Echo "Mapping action data for reports..."
    PostActions objDatabase
    WScript.Quit 0
End If

strLogDir = args(3)

If (LCase(args(4)) = "-tools") Then
    UpdateToolDefinitionTables objDatabase, strLogDir
    WScript.Quit 0
ElseIf (LCase(args(4)) = "-scans" Or LCase(args(4)) = "-actions") Then
    If(args.Count = 6) Then
        If (LCase(args(5)) = "-bulk") Then
            strLogFile = GetConcatFileName()
	        ConcatFiles strLogDir, strLogFile
	    Else
	        WScript.Echo "ERROR: Invalid argument."
	        WScript.Quit ErrorInvalidArgs	
	    End If
	Else
	    strLogFile = strLogDir
	End If
Else
    WScript.Echo "ERROR: Invalid argument."
	WScript.Quit ErrorInvalidArgs	
End If

' Create the SQLXMLBulkLoad object and feed it
' a valid connection string.
On Error Resume Next
Set sqlbl = CreateObject("SQLXMLBulkLoad.SQLXMLBulkLoad")
If (Err.Number <> 0 Or sqlbl Is Nothing) Then
	WScript.Echo "The SQLXML component must be installed on this computer in order to perform the import operation. Please see the OMPM documentation for instructions how to install SQLXML."
	WScript.Quit ErrorSQLXMLBulkLoad
End If
sqlbl.ConnectionString = "Provider=SQLOLEDB.1;Data Source=" & strServer & ";Database=" & strDatabase & ";Integrated Security=SSPI"

' Set up our error handling.
sqlbl.ErrorLogFile = GetErrorFileName()

' Change some properties to increase perf
sqlbl.CheckConstraints = False
sqlbl.ForceTableLock = True
sqlbl.KeepIdentity = False

' Execute the import operation.
sqlbl.Execute strMapFile, strLogFile

' Report any errors.
If (Err.Number <> 0) Then
	WScript.Echo "ERROR: Import operation failed."
	WScript.Echo Err.Description
	ShowErrors sqlbl.ErrorLogFile
	If (args.Count = 6) Then
		g_fso.DeleteFile strLogFile
	End If
	WScript.Quit ErrorImportFailed
End If
On Error Goto 0

If (args.Count = 6) Then
	On Error Resume Next
	g_fso.DeleteFile strLogFile
	If (Err.Number <> 0) Then
	    WScript.Echo "Handle to file " & strLogFile & " is still in use and could not be deleted. Trying again..."
	    WScript.Sleep 5000
	    g_fso.DeleteFile strLogFile
	    If (Err.Number <> 0) Then
	        WScript.Echo "Warning: Temporary File " & strLogFile & " could not be deleted. You may want to delete this file manually to free up disk space."
	    Else
	        WScript.Echo "File " & strLogFile & " was deleted successfully."
	    End If
	End If
	On Error Goto 0
End If

' We're through.
Set sqlbl = Nothing
Set g_fso = Nothing
Set g_xmldoc = Nothing

</script>
</job>
</package>