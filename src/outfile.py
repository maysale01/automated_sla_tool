# Writes outfile and makes copies of the program generated reports
# (E.g. variables included in a result which was generated by the program)
import os
import sys
import openpyxl
import datetime
from src.CONSTANTS import (ROOT_DIRECTORY,
                           NETWORK_OUTPUT_LOCATION,
                           SQL_EXC_UPDATER_PATH)


def make_my_directory(directory, folder_name, dir_type=None):
    if dir_type == 'Archive':
        os.chdir(directory + '/Archive/')
    else:
        os.chdir(directory)
    try:
        os.mkdir(folder_name)
    except OSError:
        print("Folder %s already exists." % folder_name)
        pass


def write_trend_report(report_date_datetime, last_row=92):
    file_open_date = report_date_datetime.strftime("%m%d%Y")
    file_year = report_date_datetime.strftime("%Y")
    report_date_workbook = openpyxl.load_workbook('%s\\%s\\%s_Incoming DID Summary.xlsx' %
                                                  (NETWORK_OUTPUT_LOCATION, file_year, file_open_date), data_only=True)
    report_page = report_date_workbook.get_sheet_by_name("REPORT")
    total_calls_received = report_page['C%d' % last_row].value
    total_calls_answered = report_page['D%d' % last_row].value
    total_calls_lost = report_page['E%d' % last_row].value
    total_voice_mails_received = report_page['F%d' % last_row].value
    incoming_percent_answered = report_page['G%d' % last_row].value
    incoming_percent_lost = report_page['H%d' % last_row].value
    average_incoming_duration = report_page['I%d' % last_row].value
    average_wait_answered = report_page['J%d' % last_row].value
    average_wait_lost = report_page['K%d' % last_row].value
    calls_within_15_seconds = report_page['L%d' % last_row].value
    calls_within_30_seconds = report_page['M%d' % last_row].value
    calls_within_45_seconds = report_page['N%d' % last_row].value
    calls_within_60_seconds = report_page['O%d' % last_row].value
    calls_greater_than_60_seconds = report_page['P%d' % last_row].value
    calls_answered_plus = report_page['Q%d' % last_row].value
    longest_waiting_answered = report_page['R%d' % last_row].value
    pca = report_page['S%d' % last_row].value

    trend_workbook = openpyxl.load_workbook("%s\\%s" % (NETWORK_OUTPUT_LOCATION, 'Trend.xlsx'))
    trend_page = trend_workbook.get_sheet_by_name("Data")
    current_report_trend_row = 0
    for row_number in range(4, trend_page.max_row + 1):
        trend_row_date = trend_page['A%d' % row_number].value
        try:
            if (report_date_datetime - trend_row_date) <= datetime.timedelta(days=1):
                current_report_trend_row = row_number
                break
        except TypeError:
            pass
    trend_page['C%d' % current_report_trend_row] = total_calls_received
    trend_page['D%d' % current_report_trend_row] = total_calls_answered
    trend_page['E%d' % current_report_trend_row] = total_calls_lost
    trend_page['F%d' % current_report_trend_row] = total_voice_mails_received
    trend_page['G%d' % current_report_trend_row] = incoming_percent_answered
    trend_page['H%d' % current_report_trend_row] = incoming_percent_lost
    trend_page['I%d' % current_report_trend_row] = average_incoming_duration
    trend_page['J%d' % current_report_trend_row] = average_wait_answered
    trend_page['K%d' % current_report_trend_row] = average_wait_lost
    trend_page['L%d' % current_report_trend_row] = calls_within_15_seconds
    trend_page['M%d' % current_report_trend_row] = calls_within_30_seconds
    trend_page['N%d' % current_report_trend_row] = calls_within_45_seconds
    trend_page['O%d' % current_report_trend_row] = calls_within_60_seconds
    trend_page['P%d' % current_report_trend_row] = calls_greater_than_60_seconds
    trend_page['Q%d' % current_report_trend_row] = calls_answered_plus
    trend_page['R%d' % current_report_trend_row] = longest_waiting_answered
    trend_page['S%d' % current_report_trend_row] = pca
    trend_workbook.save("%s\\%s" % (NETWORK_OUTPUT_LOCATION, 'Trend.xlsx'))


def write_outfile(client_report, abandon_group_file, call_details_file,
                  report_date_datetime, voice_mail_dict, report_page_rows,
                  data_page_rows, wb, data_page, report_page):
    date_string = report_date_datetime.strftime("%m%d%Y")
    archive_date = '/Archive/%s/%s' % (date_string, date_string)
    date_year = report_date_datetime.strftime('%Y')

    for client in client_report:
        report_row = report_page_rows[client.get_string_name()]
        data_row = data_page_rows[client.get_string_name()]
        report_page['F%d' % report_row] = client.get_voice_mails()
        data_page['C%d' % data_row] = client.get_total_calls()
        data_page['E%d' % data_row] = client.get_calls_answered()
        data_page['G%d' % data_row] = client.get_true_calls_lost()
        data_page['L%d' % data_row] = client.get_average_duration_time_stamp()
        data_page['N%d' % data_row] = client.get_average_wait_answered_time_stamp()
        data_page['P%d' % data_row] = client.get_average_wait_lost_time_stamp()
        data_page['X%d' % data_row] = client.get_longest_answered_time_stamp()
        (call_15sec,
         call_30sec,
         call_45sec,
         call_60sec,
         call_g60sec) = client.get_ticker()
        data_page['R%d' % data_row] = call_15sec
        data_page['S%d' % data_row] = call_30sec
        data_page['T%d' % data_row] = call_45sec
        data_page['U%d' % data_row] = call_60sec
        data_page['V%d' % data_row] = call_g60sec
    data_page['AC1'] = date_string[0:2] + '/' + date_string[2:4] + '/' + date_string[4:]
    wb.save('%s\\Output\\%s_Incoming DID Summary.xlsx' % (ROOT_DIRECTORY, date_string))
    make_my_directory(NETWORK_OUTPUT_LOCATION, date_year)
    wb.save('%s\\%s\\%s_Incoming DID Summary.xlsx' %
            (NETWORK_OUTPUT_LOCATION, date_year, date_string))
    make_my_directory(ROOT_DIRECTORY, date_year, 'Archive')

    # write_trend_report(report_date_datetime)

    abandon_group_file.save('%s%s_Group Abandoned Calls.xlsx' % (ROOT_DIRECTORY, archive_date))
    call_details_file.save('%s%s_Call Details.xlsx' % (ROOT_DIRECTORY, archive_date))
    text_file = open('%s%svoiceMails.txt' % (ROOT_DIRECTORY, archive_date), 'w')
    for client in voice_mail_dict:
        text_file.write("Client: %s Number %s\n" % (client, voice_mail_dict[client]))
    text_file.close()
    run_sql_command = (report_date_datetime - datetime.datetime.now()) <= datetime.timedelta(days=1)
    if run_sql_command is True:
        sys.path.append(SQL_EXC_UPDATER_PATH)
        import client_counter
